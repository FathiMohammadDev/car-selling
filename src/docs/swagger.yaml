definitions:
  dto.CreateCarTypeReq:
    properties:
      name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.CreateCityReq:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - countryId
    - name
    type: object
  dto.CreateCompanyReq:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - countryId
    - name
    type: object
  dto.CreateGearboxReq:
    properties:
      name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.CreatePropertyCategoryRequest:
    properties:
      icon:
        maxLength: 1000
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.CreatePropertyRequest:
    properties:
      categoryId:
        type: integer
      dataType:
        maxLength: 15
        type: string
      description:
        maxLength: 1000
        type: string
      icon:
        maxLength: 1000
        type: string
      name:
        maxLength: 50
        minLength: 3
        type: string
      unit:
        maxLength: 15
        type: string
    required:
    - categoryId
    - name
    type: object
  dto.CreateUpdateCountryReq:
    properties:
      name:
        maxLength: 20
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.GetOtpRequest:
    properties:
      mobileNumber:
        maxLength: 11
        minLength: 11
        type: string
    required:
    - mobileNumber
    type: object
  dto.LoginByUsernameRequest:
    properties:
      password:
        minLength: 6
        type: string
      username:
        minLength: 5
        type: string
    required:
    - password
    - username
    type: object
  dto.RegisterUserByUsernameRequest:
    properties:
      email:
        minLength: 6
        type: string
      firstName:
        minLength: 3
        type: string
      lastName:
        minLength: 6
        type: string
      password:
        minLength: 6
        type: string
      username:
        minLength: 5
        type: string
    required:
    - firstName
    - lastName
    - password
    - username
    type: object
  dto.UpdateCarTypeReq:
    properties:
      name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.UpdateCityReq:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    type: object
  dto.UpdateCompanyReq:
    properties:
      countryId:
        type: integer
      name:
        maxLength: 20
        minLength: 3
        type: string
    type: object
  dto.UpdateFileRequest:
    properties:
      description:
        type: string
    type: object
  dto.UpdateGearboxReq:
    properties:
      name:
        maxLength: 15
        minLength: 3
        type: string
    required:
    - name
    type: object
  dto.UpdatePropertyCategoryRequest:
    properties:
      icon:
        type: string
      name:
        type: string
    type: object
  dto.UpdatePropertyRequest:
    properties:
      categoryId:
        type: integer
      dataType:
        maxLength: 15
        type: string
      description:
        maxLength: 1000
        type: string
      icon:
        maxLength: 1000
        type: string
      name:
        type: string
      unit:
        maxLength: 15
        type: string
    type: object
info:
  contact: {}
paths:
  /v1/car-type/:
    post:
      consumes:
      - application/json
      description: Create new CarType
      parameters:
      - description: CreateCarTypeReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCarTypeReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Create new CarType
      tags:
      - CarType
  /v1/car-type/{id}:
    delete:
      consumes:
      - application/json
      description: delete CarType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: delete CarType
      tags:
      - CarType
    get:
      consumes:
      - application/json
      description: Get a CarType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Get a CarType
      tags:
      - CarType
    put:
      consumes:
      - application/json
      description: Update CarType
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateCarTypeReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCarTypeReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Update CarType
      tags:
      - CarType
  /v1/cities/:
    post:
      consumes:
      - application/json
      description: Create new city
      parameters:
      - description: CreateCityReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCityReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Create new city
      tags:
      - City
  /v1/cities/{id}:
    delete:
      consumes:
      - application/json
      description: delete city
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: delete city
      tags:
      - City
    get:
      consumes:
      - application/json
      description: Get a city
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Get a city
      tags:
      - City
    put:
      consumes:
      - application/json
      description: Update city
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateCityReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCityReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Update city
      tags:
      - City
  /v1/company/:
    post:
      consumes:
      - application/json
      description: Create new Company
      parameters:
      - description: CreateCompanyReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateCompanyReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Create new Company
      tags:
      - Company
  /v1/company/{id}:
    delete:
      consumes:
      - application/json
      description: delete Company
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: delete Company
      tags:
      - Company
    get:
      consumes:
      - application/json
      description: Get a Company
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Get a Company
      tags:
      - Company
    put:
      consumes:
      - application/json
      description: Update Company
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateCompanyReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateCompanyReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Update Company
      tags:
      - Company
  /v1/countries/:
    post:
      consumes:
      - application/json
      description: Create new country
      parameters:
      - description: CreateUpdateCountryReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUpdateCountryReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Create new country
      tags:
      - Country
  /v1/countries/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a country
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Delete a country
      tags:
      - Country
    get:
      consumes:
      - application/json
      description: Get a country
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Get a country
      tags:
      - Country
    put:
      consumes:
      - application/json
      description: Update country
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CreateUpdateCountryReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateUpdateCountryReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Update country
      tags:
      - Country
  /v1/files/:
    post:
      consumes:
      - application/x-www-form-urlencoded
      description: Create a file
      parameters:
      - in: formData
        name: description
        required: true
        type: string
      - description: Create a file
        in: formData
        name: file
        required: true
        type: file
      responses: {}
      security:
      - AuthBearer: []
      summary: Create a file
      tags:
      - Files
  /v1/files/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a file
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - AuthBearer: []
      summary: Delete a file
      tags:
      - Files
    get:
      consumes:
      - application/json
      description: Get a file
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      responses: {}
      security:
      - AuthBearer: []
      summary: Get a file
      tags:
      - Files
    put:
      consumes:
      - application/json
      description: Update a file
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: Update a file
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateFileRequest'
      responses: {}
      security:
      - AuthBearer: []
      summary: Update a file
      tags:
      - Files
  /v1/gearbox/:
    post:
      consumes:
      - application/json
      description: Create new Gearbox
      parameters:
      - description: CreateGearboxReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreateGearboxReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Create new Gearbox
      tags:
      - Gearbox
  /v1/gearbox/{id}:
    delete:
      consumes:
      - application/json
      description: delete Gearbox
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: delete Gearbox
      tags:
      - Gearbox
    get:
      consumes:
      - application/json
      description: Get a Gearbox
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Get a Gearbox
      tags:
      - Gearbox
    put:
      consumes:
      - application/json
      description: Update Gearbox
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: UpdateGearboxReq
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateGearboxReq'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Update Gearbox
      tags:
      - Gearbox
  /v1/property-category/:
    post:
      consumes:
      - application/json
      description: Create new PropertyCategory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: CreatePropertyCategoryRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePropertyCategoryRequest'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Create new PropertyCategory
      tags:
      - PropertyCategory
  /v1/property-category/{id}:
    delete:
      consumes:
      - application/json
      description: Delete new PropertyCategory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Delete new PropertyCategory
      tags:
      - PropertyCategory
    get:
      consumes:
      - application/json
      description: Get new PropertyCategory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Get new PropertyCategory
      tags:
      - PropertyCategory
    put:
      consumes:
      - application/json
      description: Update new PropertyCategory
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: UpdatePropertyCategoryRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePropertyCategoryRequest'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Update new PropertyCategory
      tags:
      - PropertyCategory
  /v1/property/:
    post:
      consumes:
      - application/json
      description: Create new Property
      parameters:
      - description: CreatePropertyRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.CreatePropertyRequest'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Create new Property
      tags:
      - Property
  /v1/property/{id}:
    delete:
      consumes:
      - application/json
      description: Delete new Property
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Delete new Property
      tags:
      - Property
    get:
      consumes:
      - application/json
      description: Get new Property
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Get new Property
      tags:
      - Property
    put:
      consumes:
      - application/json
      description: Update new Property
      parameters:
      - description: Id
        in: path
        name: id
        required: true
        type: integer
      - description: UpdatePropertyRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.UpdatePropertyRequest'
      produces:
      - application/json
      responses: {}
      security:
      - AuthBearer: []
      summary: Update new Property
      tags:
      - Property
  /v1/users/login-by-username:
    post:
      consumes:
      - application/json
      description: Login user by userName
      parameters:
      - description: LoginByUsernameRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.LoginByUsernameRequest'
      produces:
      - application/json
      responses: {}
      summary: Login user by userName
      tags:
      - Users
  /v1/users/register-by-username:
    post:
      consumes:
      - application/json
      description: Registe user by userName
      parameters:
      - description: RegisterUserByUsernameRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterUserByUsernameRequest'
      produces:
      - application/json
      responses: {}
      summary: Registe user by userName
      tags:
      - Users
  /v1/users/send-otp:
    post:
      consumes:
      - application/json
      description: Send otp to user
      parameters:
      - description: GetOtpRequest
        in: body
        name: Request
        required: true
        schema:
          $ref: '#/definitions/dto.GetOtpRequest'
      produces:
      - application/json
      responses: {}
      summary: Send otp to user
      tags:
      - Users
securityDefinitions:
  AuthBearer:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
